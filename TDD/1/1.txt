در مثال کد بالا، `mockRepo.Setup` برای تعریف یک شیء Mock از IOrderRepository و تعیین رفتار آن در زمان اجرای تست استفاده شده است. با استفاده از این تابع، می‌توانید رفتار شیء Mock را تعیین کنید و برای اعتبارسنجی کد خود در زمان اجرای تست استفاده کنید.

در مثال بالا، `mockRepo.Setup(repo => repo.SaveOrder(order)).Returns(Task.CompletedTask)` باعث تعریف یک رفتار برای شیء Mock از IOrderRepository می‌شود. این رفتار به این معنی است که وقتی تابع SaveOrder برای این شیء فراخوانی می‌شود، به صورت پیش‌فرض Task.CompletedTask برگردانده می‌شود. بنابراین، در تست `CreateNewOrder_ShouldSaveOrderInDatabase`، با فراخوانی تابع CreateNewOrder از شیء OrderService، تابع SaveOrder برای شیء Mock از IOrderRepository فراخوانی می‌شود و Task.CompletedTask برگردانده می‌شود.

این نوع از Mocking به شما این امکان را می‌دهد که در زمان اجرای تست، به جای استفاده از یک پایگاه داده واقعی، از یک شیء Mock استفاده کنید که رفتار دلخواه شما را در زمان اجرای تست پیاده‌سازی می‌کند. این کار به شما کمک می‌کند که تست‌های خود را به صورت مستقل از پایگاه داده اجرا کنید و نگرانی‌هایی مانند ایجاد اطلاعات دستی در پایگاه داده برای اجرای تست را نداشته باشید.

در این تست، با استفاده از mockDbContext.Verify(db => db.SaveChangesAsync(), Times.Once)، اطمینان حاصل می‌کنیم که تابع SaveChangesAsync برای شیء Mock از پایگاه داده فراخوانی شده و فقط یک بار فراخوانی شده است. این نشان می‌دهد که اطلاعات سفارش در پایگاه داده ذخیره شده است.

در مثال بالا، با استفاده از یک شیء Mock از IOrderRepository، می‌توانیم رفتار Mock را به گونه‌ای تعیین کنیم که در صورت فراخوانی تابع SaveOrder، Task.CompletedTask برگردانده شود. این به معنی این است که در زمان اجرای تست، تابع SaveOrder به صورت مستقیم در پایگاه داده اجرا نمی‌شود و به جای آن، Task.CompletedTask برگردانده می‌شود.

در مثال بالا چجوری مطمئن میشویم که عملیات ذخیره سازی در بانک به درستی انجام شده است یا نه ؟

برای اطمینان از اینکه عملیات ذخیره سازی در پایگاه داده به درستی انجام شده است، می‌توانیم از روش‌های دیگری مانند استفاده از تست‌های پذیرش (Acceptance Testing) یا تست‌های انتگراسیون (Integration Testing) استفاده کنیم. در این تست‌ها، به جای استفاده از شیء Mock، از یک پایگاه داده واقعی استفاده می‌شود و پس از فراخوانی تابع SaveOrder، با استفاده از تابع GetOrderById می‌توانیم سفارش را از پایگاه داده بازیابی کنیم و مطمئن شویم که عملیات ذخیره‌سازی به درستی انجام شده است.

برای مثال، می‌توانید یک تست پذیرش برای تابع `CreateNewOrder` بنویسید که عملیات ذخیره‌سازی را در پایگاه داده بررسی می‌کند. با این کار، می‌توانید به راحتی از صحت عملکرد سیستم خود در شرایط واقعی اطمینان حاصل کنید.

تست پذیرش بخشی از tdd نیست؟

بله، تست پذیرش (Acceptance Testing) بخشی از TDD (Test Driven Development) است. در TDD، ابتدا تست‌های واحد را برای هر قطعه کد می‌نویسیم تا از صحت عملکرد آن‌ها اطمینان حاصل کنیم. سپس با ادغام این قطعات کد، تست‌های پذیرش را نیز برای اطمینان از صحت و کارایی سیستم به صورت کامل نوشته و اجرا می‌کنیم. در واقع، تست پذیرش به عنوان یک نوع تست انتگراسیون (Integration Testing)، به ما اجازه می‌دهد تا عملکرد سیستم را به صورت کامل و در شرایط واقعی بررسی کنیم.

در تست پذیرش، تست کیس‌های مختلف را برای سیستم خود اجرا می‌کنیم تا از صحت و کارایی سیستم و همچنین از اینکه سیستم به درستی با نیازمندی‌ها و مشخصات فنی مورد نظر کار می‌کند، اطمینان حاصل کنیم. در این نوع تست، معمولاً از داده‌های واقعی استفاده می‌شود و تست‌های پذیرش با هدف بررسی عملکرد سیستم به عنوان یک مجموعه درست و کامل انجام می‌شوند.

بنابراین، تست پذیرش یک بخش مهم از TDD است که به ما اجازه می‌دهد به راحتی از صحت و کارایی سیستم خود در شرایط واقعی اطمینان حاصل کنیم.